{"version":3,"sources":["components/FeedItem.js","lib/HexStringUtil.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["FeedItem","props","type","lazy","content","startsWith","state","text","lazyText","iconColor","a","this","axios","get","httpResponse","headers","search","setState","data","replace","ipfsResponse","Card","fluid","raised","style","background","theme","Content","Description","color","extra","Label","attached","size","date","React","Component","stringToHex","string","split","map","c","charCodeAt","toString","padStart","join","Profile","feed","localStorage","getItem","JSON","parse","id","parseInt","chain","host","response","status","Array","isArray","result","filter","e","to","toLowerCase","input","v","i","findIndex","t","hash","hex","timeStamp","decodeURIComponent","substring","Date","reverse","setItem","stringify","Container","marginTop","Divider","hidden","Header","slice","Group","item","ipfs","create","require","App","disableConnect","window","ethereum","connect","addModalOpen","postMessage","disableRefresh","profile","createRef","setTheme","document","body","classList","remove","add","removeItem","request","method","then","accounts","chainId","current","loadData","catch","_","post","length","pin","cid","params","from","finally","className","Menu","fixed","compact","borderless","inverted","Item","header","icon","disabled","onClick","setTimeout","position","onClickToggleTheme","bind","name","open","onClickConnect","ref","Button","circular","onClickAdd","display","margin","bottom","right","zIndex","Modal","Input","placeholder","onChange","value","Message","warning","Actions","negative","labelPosition","positive","onClickPostToMetamask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.318990e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Label } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\n\r\nconst IPFS_GATEWAY = \"https://ipfs.io/ipfs/\";\r\n\r\nclass FeedItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let type = \"text\";\r\n    let lazy = false;\r\n\r\n    if (this.props.content.startsWith(\"https://\")) {\r\n      type = \"https\";\r\n      lazy = true;\r\n    } else if (this.props.content.startsWith(\"ipfs://\")) {\r\n      type = \"ipfs\";\r\n      lazy = true;\r\n    }\r\n\r\n    this.state = {\r\n      text: true,\r\n      lazy,\r\n      type,\r\n      lazyText: \"loading...\",\r\n      iconColor: \"grey\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.state.lazy) {\r\n      switch (this.state.type) {\r\n        default:\r\n        case \"https\":\r\n          let httpResponse = await axios.get(this.props.content);\r\n          let httpContentType = httpResponse.headers[\"content-type\"];\r\n          if (httpContentType.search(\"text/plain\") >= 0) {\r\n            this.setState({\r\n              lazyText: httpResponse.data,\r\n              iconColor: \"red\",\r\n            });\r\n          }\r\n          break;\r\n        case \"ipfs\":\r\n          let ipfsResponse = await axios.get(\r\n            `${IPFS_GATEWAY}${this.props.content.replace(\"ipfs://\", \"\")}`\r\n          );\r\n          let ipfsContentType = ipfsResponse.headers[\"content-type\"];\r\n          if (ipfsContentType.search(\"text/plain\") >= 0) {\r\n            this.setState({\r\n              lazyText: ipfsResponse.data,\r\n              iconColor: \"teal\",\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        fluid\r\n        raised\r\n        style={{\r\n          background: this.props.theme === \"dark\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        <Card.Content>\r\n          <Card.Description\r\n            content={this.state.lazy ? this.state.lazyText : this.props.content}\r\n            style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n          />\r\n        </Card.Content>\r\n        <Card.Content\r\n          extra\r\n          style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n        >\r\n          {this.state.lazy && (\r\n            <Label\r\n              attached=\"bottom right\"\r\n              color={this.state.iconColor}\r\n              size=\"tiny\"\r\n            >\r\n              {this.state.type}{\" \"}\r\n            </Label>\r\n          )}\r\n          {this.props.date}\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedItem;\r\n","export function stringToHex(string) {\r\n  return string\r\n    .split(\"\")\r\n    .map((c) => c.charCodeAt(0).toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n}\r\n\r\nexport function hexToString(hex) {\r\n  return decodeURIComponent(\r\n    hex\r\n      .replace(/\\s+/g, \"\")\r\n      .replace(/[0-9a-f]{2}/g, \"%$&\")\r\n      .substring(2)\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Container, Divider, Header } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport FeedItem from \"./FeedItem\";\r\nimport { hexToString } from \"../lib/HexStringUtil\";\r\n\r\nclass Profile extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let feed = localStorage.getItem(\"feed\");\r\n    if (feed) {\r\n      feed = JSON.parse(feed);\r\n    } else {\r\n      feed = [];\r\n    }\r\n\r\n    this.state = {\r\n      feed,\r\n    };\r\n  }\r\n\r\n  async loadData(id) {\r\n    if (!id) return;\r\n\r\n    let host;\r\n\r\n    switch (parseInt(this.props.chain)) {\r\n      // Polygon Mumbai Testnet\r\n      case 80001:\r\n        host = \"https://api-testnet.polygonscan.com\";\r\n        break;\r\n\r\n      // Polygon Mainnet\r\n      case 137:\r\n        host = \"https://api.polygonscan.com\";\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\r\n    let response = await axios.get(\r\n      `${host}/api?module=account&action=txlist&address=${id}&startblock=1&endblock=99999999&sort=asc`\r\n    );\r\n\r\n    let data = response.data;\r\n\r\n    if (data.status !== \"1\" || !Array.isArray(data.result)) return;\r\n\r\n    let feed = data.result\r\n      .filter((e) => e.to.toLowerCase() === this.props.id.toLowerCase())\r\n      .filter((e) => e.input !== \"0x\")\r\n      .filter((v, i, a) => a.findIndex((t) => t.hash === v.hash) === i)\r\n      .map(({ hash, input, timeStamp }) => ({\r\n        hash,\r\n        content: hexToString(input),\r\n        date: new Date(parseInt(timeStamp) * 1000).toString().substring(0, 24),\r\n      }))\r\n      .reverse();\r\n\r\n    this.setState({ feed });\r\n    localStorage.setItem(\"feed\", JSON.stringify(feed));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container style={{ marginTop: \"2.5em\" }}>\r\n        <Divider hidden />\r\n        {this.props.id && (\r\n          <Header\r\n            style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n            content={`Address ${this.props.id.substring(\r\n              0,\r\n              6\r\n            )}...${this.props.id.slice(-4)} Chain ${this.props.chain}`}\r\n          />\r\n        )}\r\n        <Divider hidden />\r\n        <Card.Group>\r\n          {this.props.id &&\r\n            this.state.feed.map((item) => (\r\n              <FeedItem key={item.hash} {...item} theme={this.props.theme} />\r\n            ))}\r\n        </Card.Group>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { Button, Input, Menu, Message, Modal } from \"semantic-ui-react\";\r\nimport Profile from \"./components/Profile\";\r\nimport { stringToHex } from \"./lib/HexStringUtil\";\r\nconst { create } = require(\"ipfs-http-client\");\r\nconst ipfs = create(\"http://localhost:5001\");\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    let disableConnect = typeof window.ethereum === \"undefined\";\r\n    const id = localStorage.getItem(\"id\") || \"\";\r\n    const chain = localStorage.getItem(\"chain\") || null;\r\n\r\n    this.state = {\r\n      theme: localStorage.getItem(\"theme\") || \"light\",\r\n      connect: id ? true : false,\r\n      disableConnect,\r\n      id,\r\n      chain,\r\n      addModalOpen: false,\r\n      postMessage: \"\",\r\n      disableRefresh: false,\r\n    };\r\n\r\n    this.profile = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setTheme(this.state.theme);\r\n  }\r\n\r\n  onClickToggleTheme() {\r\n    if (this.state.theme === \"dark\") {\r\n      this.setTheme(\"light\");\r\n    } else {\r\n      this.setTheme(\"dark\");\r\n    }\r\n  }\r\n\r\n  setTheme(theme) {\r\n    this.setState({ theme });\r\n    localStorage.setItem(\"theme\", theme);\r\n    document.body.classList.remove(\"dark\");\r\n    document.body.classList.remove(\"light\");\r\n    document.body.classList.add(theme);\r\n  }\r\n\r\n  onClickConnect() {\r\n    if (this.state.connect) {\r\n      this.setState({ connect: false, id: \"\" });\r\n      localStorage.removeItem(\"feed\");\r\n      localStorage.removeItem(\"id\");\r\n    } else {\r\n      window.ethereum\r\n        .request({ method: \"eth_requestAccounts\" })\r\n        .then((accounts) => {\r\n          let chain = window.ethereum.chainId;\r\n          if (chain.startsWith(\"0x\")) {\r\n            chain = parseInt(chain);\r\n          }\r\n          let id = accounts[0];\r\n          localStorage.setItem(\"id\", id);\r\n          localStorage.setItem(\"chain\", chain);\r\n          this.setState({ connect: true, id, chain });\r\n          this.profile.current.loadData(id);\r\n        })\r\n        .catch((_) => {\r\n          this.setState({ connect: false, id: \"\" });\r\n          localStorage.removeItem(\"feed\");\r\n          localStorage.removeItem(\"id\");\r\n        });\r\n    }\r\n  }\r\n\r\n  onClickAdd() {\r\n    this.setState({ addModalOpen: true, postMessage: \"\" });\r\n  }\r\n\r\n  async onClickPostToMetamask() {\r\n    let post = this.state.postMessage;\r\n    let hex;\r\n\r\n    // Put long posts on ipfs\r\n    if (post.length > 60) {\r\n      const { cid } = await ipfs.add(post, { pin: true });\r\n      hex = stringToHex(`ipfs://${cid.toString()}`);\r\n    } else {\r\n      hex = stringToHex(post);\r\n    }\r\n\r\n    window.ethereum\r\n      .request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [\r\n          {\r\n            to: this.state.id,\r\n            from: this.state.id,\r\n            data: `0x${hex}`,\r\n          },\r\n        ],\r\n      })\r\n      .then((_) => {})\r\n      .catch((_) => {})\r\n      .finally((_) => this.setState({ addModalOpen: false, postMessage: \"\" }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.theme}>\r\n        <Menu\r\n          fixed=\"top\"\r\n          compact\r\n          borderless\r\n          inverted={this.state.theme === \"dark\"}\r\n        >\r\n          <Menu.Item header content=\"Profile\" />\r\n          {this.state.id && (\r\n            <Menu.Item\r\n              icon=\"refresh\"\r\n              disabled={this.state.disableRefresh}\r\n              onClick={() => {\r\n                this.profile.current.loadData(this.state.id);\r\n                this.setState({ disableRefresh: true });\r\n                setTimeout(\r\n                  () => this.setState({ disableRefresh: false }),\r\n                  2000\r\n                );\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Menu.Item\r\n            position=\"right\"\r\n            icon={this.state.theme === \"dark\" ? \"moon\" : \"sun\"}\r\n            onClick={this.onClickToggleTheme.bind(this)}\r\n          />\r\n          <Menu.Item\r\n            name={\r\n              this.state.disableConnect\r\n                ? \"Install Metamask\"\r\n                : this.state.connect\r\n                ? \"Disconnect\"\r\n                : \"Connect\"\r\n            }\r\n            icon={this.state.disableConnect ? \"warning\" : \"power\"}\r\n            onClick={\r\n              this.state.disableConnect\r\n                ? () => {\r\n                    window.open(\"https://metamask.io\", \"_blank\");\r\n                  }\r\n                : this.onClickConnect.bind(this)\r\n            }\r\n          />\r\n        </Menu>\r\n        <Profile\r\n          ref={this.profile}\r\n          theme={this.state.theme}\r\n          id={this.state.id}\r\n          chain={this.state.chain}\r\n        />\r\n        <Button\r\n          circular\r\n          icon=\"add\"\r\n          size=\"big\"\r\n          onClick={this.onClickAdd.bind(this)}\r\n          style={{\r\n            display: this.state.connect ? \"block\" : \"none\",\r\n            position: \"fixed\",\r\n            margin: \"2em\",\r\n            bottom: \"0px\",\r\n            right: \"0px\",\r\n            zIndex: 6,\r\n          }}\r\n        />\r\n        <Modal open={this.state.addModalOpen}>\r\n          <Modal.Header>Post a new Message</Modal.Header>\r\n          <Modal.Content>\r\n            <Modal.Description>\r\n              <Input\r\n                fluid\r\n                placeholder=\"Enter your messsage\"\r\n                onChange={(e, { value }) =>\r\n                  this.setState({ postMessage: value })\r\n                }\r\n              />\r\n              <Message warning>\r\n                <p>\r\n                  Metamask will prompt you for transaction confirmation. Verify\r\n                  transaction amount is 0 and to address is your own. The data\r\n                  input will be a hex encode of your post.\r\n                </p>\r\n                <p>\r\n                  After confirming in Metamask, the transaction may take some\r\n                  time to finalize on the blockchain based on network\r\n                  conditions. You can refresh from the header icon when Metamask\r\n                  notifies you of successful posting.\r\n                </p>\r\n              </Message>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              negative\r\n              content=\"Cancel\"\r\n              onClick={() =>\r\n                this.setState({ addModalOpen: false, postMessage: \"\" })\r\n              }\r\n            />\r\n            <Button\r\n              content=\"Post\"\r\n              labelPosition=\"right\"\r\n              icon=\"checkmark\"\r\n              positive\r\n              disabled={this.state.postMessage ? false : true}\r\n              onClick={this.onClickPostToMetamask.bind(this)}\r\n            />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}