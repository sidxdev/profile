{"version":3,"sources":["components/FeedItem.js","lib/HexStringUtil.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["FeedItem","props","type","lazy","content","startsWith","state","text","lazyText","iconColor","a","this","axios","get","httpResponse","headers","search","setState","data","replace","ipfsResponse","Card","fluid","raised","style","background","theme","Content","Description","color","extra","Label","attached","size","date","React","Component","stringToHex","string","split","map","c","charCodeAt","toString","padStart","join","Profile","feed","localStorage","getItem","JSON","parse","id","response","status","Array","isArray","result","filter","e","to","toLowerCase","input","v","i","findIndex","t","hash","hex","timeStamp","decodeURIComponent","substring","Date","parseInt","reverse","setItem","stringify","Container","marginTop","Divider","hidden","Group","item","ipfs","create","require","App","disableConnect","window","ethereum","connect","addModalOpen","postMessage","disableRefresh","profile","createRef","setTheme","document","body","classList","remove","add","removeItem","request","method","then","accounts","current","loadData","catch","_","clear","post","length","pin","cid","params","selectedAddress","from","finally","className","Menu","fixed","compact","borderless","inverted","Item","header","slice","icon","disabled","onClick","setTimeout","position","onClickToggleTheme","bind","name","open","onClickConnect","ref","Button","circular","onClickAdd","display","margin","bottom","right","zIndex","Modal","Header","Input","placeholder","onChange","value","Message","warning","Actions","negative","labelPosition","positive","onClickPostToMetamask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.96327b0b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Label } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\n\r\nconst IPFS_GATEWAY = \"https://ipfs.io/ipfs/\";\r\n\r\nclass FeedItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let type = \"text\";\r\n    let lazy = false;\r\n\r\n    if (this.props.content.startsWith(\"https://\")) {\r\n      type = \"https\";\r\n      lazy = true;\r\n    } else if (this.props.content.startsWith(\"ipfs://\")) {\r\n      type = \"ipfs\";\r\n      lazy = true;\r\n    }\r\n\r\n    this.state = {\r\n      text: true,\r\n      lazy,\r\n      type,\r\n      lazyText: \"loading...\",\r\n      iconColor: \"grey\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.state.lazy) {\r\n      switch (this.state.type) {\r\n        default:\r\n        case \"https\":\r\n          let httpResponse = await axios.get(this.props.content);\r\n          let httpContentType = httpResponse.headers[\"content-type\"];\r\n          if (httpContentType.search(\"text/plain\") >= 0) {\r\n            this.setState({\r\n              lazyText: httpResponse.data,\r\n              iconColor: \"red\",\r\n            });\r\n          }\r\n          break;\r\n        case \"ipfs\":\r\n          let ipfsResponse = await axios.get(\r\n            `${IPFS_GATEWAY}${this.props.content.replace(\"ipfs://\", \"\")}`\r\n          );\r\n          let ipfsContentType = ipfsResponse.headers[\"content-type\"];\r\n          if (ipfsContentType.search(\"text/plain\") >= 0) {\r\n            this.setState({\r\n              lazyText: ipfsResponse.data,\r\n              iconColor: \"teal\",\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        fluid\r\n        raised\r\n        style={{\r\n          background: this.props.theme === \"dark\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        <Card.Content>\r\n          <Card.Description\r\n            content={this.state.lazy ? this.state.lazyText : this.props.content}\r\n            style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n          />\r\n        </Card.Content>\r\n        <Card.Content\r\n          extra\r\n          style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n        >\r\n          {this.state.lazy && (\r\n            <Label\r\n              attached=\"top right\"\r\n              color={this.state.iconColor}\r\n              size=\"tiny\"\r\n            >\r\n              {this.state.type}{\" \"}\r\n            </Label>\r\n          )}\r\n          {this.props.date}\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedItem;\r\n","export function stringToHex(string) {\r\n  return string\r\n    .split(\"\")\r\n    .map((c) => c.charCodeAt(0).toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n}\r\n\r\nexport function hexToString(hex) {\r\n  return decodeURIComponent(\r\n    hex\r\n      .replace(/\\s+/g, \"\")\r\n      .replace(/[0-9a-f]{2}/g, \"%$&\")\r\n      .substring(2)\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Container, Divider } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport FeedItem from \"./FeedItem\";\r\nimport { hexToString } from \"../lib/HexStringUtil\";\r\n\r\nclass Profile extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let feed = localStorage.getItem(\"feed\");\r\n    if (feed) {\r\n      feed = JSON.parse(feed);\r\n    } else {\r\n      feed = [];\r\n    }\r\n\r\n    this.state = {\r\n      feed,\r\n    };\r\n  }\r\n\r\n  async loadData(id) {\r\n    if (!id) return;\r\n\r\n    let response = await axios.get(\r\n      `https://api-testnet.polygonscan.com/api?module=account&action=txlist&address=${id}&startblock=1&endblock=99999999&sort=asc`\r\n    );\r\n\r\n    let data = response.data;\r\n\r\n    if (data.status !== \"1\" || !Array.isArray(data.result)) return;\r\n\r\n    let feed = data.result\r\n      .filter((e) => e.to.toLowerCase() === this.props.id.toLowerCase())\r\n      .filter((e) => e.input !== \"0x\")\r\n      .filter((v, i, a) => a.findIndex((t) => t.hash === v.hash) === i)\r\n      .map(({ hash, input, timeStamp }) => ({\r\n        hash,\r\n        content: hexToString(input),\r\n        date: new Date(parseInt(timeStamp) * 1000).toString().substring(0, 24),\r\n      }))\r\n      .reverse();\r\n\r\n    this.setState({ feed });\r\n    localStorage.setItem(\"feed\", JSON.stringify(feed));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container style={{ marginTop: \"2.5em\" }}>\r\n        <Divider hidden />\r\n        <Card.Group>\r\n          {this.props.id &&\r\n            this.state.feed.map((item) => (\r\n              <FeedItem key={item.hash} {...item} theme={this.props.theme} />\r\n            ))}\r\n        </Card.Group>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\nimport { Button, Input, Menu, Message, Modal } from \"semantic-ui-react\";\nimport Profile from \"./components/Profile\";\nimport { stringToHex } from \"./lib/HexStringUtil\";\nconst { create } = require(\"ipfs-http-client\");\nconst ipfs = create(\"http://localhost:5001\");\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    let disableConnect = typeof window.ethereum === \"undefined\";\n    const id = localStorage.getItem(\"id\") || \"\";\n\n    this.state = {\n      theme: localStorage.getItem(\"theme\") || \"light\",\n      connect: id ? true : false,\n      disableConnect,\n      id,\n      addModalOpen: false,\n      postMessage: \"\",\n      disableRefresh: false,\n    };\n\n    this.profile = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setTheme(this.state.theme);\n  }\n\n  onClickToggleTheme() {\n    if (this.state.theme === \"dark\") {\n      this.setTheme(\"light\");\n    } else {\n      this.setTheme(\"dark\");\n    }\n  }\n\n  setTheme(theme) {\n    this.setState({ theme });\n    localStorage.setItem(\"theme\", theme);\n    document.body.classList.remove(\"dark\");\n    document.body.classList.remove(\"light\");\n    document.body.classList.add(theme);\n  }\n\n  onClickConnect() {\n    if (this.state.connect) {\n      this.setState({ connect: false, id: \"\" });\n      localStorage.removeItem(\"feed\");\n      localStorage.removeItem(\"id\");\n    } else {\n      window.ethereum\n        .request({ method: \"eth_requestAccounts\" })\n        .then((accounts) => {\n          let id = accounts[0];\n          localStorage.setItem(\"id\", id);\n          this.setState({ connect: true, id });\n          this.profile.current.loadData(id);\n        })\n        .catch((_) => {\n          this.setState({ connect: false, id: \"\" });\n          localStorage.clear(\"feed\");\n          localStorage.clear(\"id\");\n        });\n    }\n  }\n\n  onClickAdd() {\n    this.setState({ addModalOpen: true, postMessage: \"\" });\n  }\n\n  async onClickPostToMetamask() {\n    let post = this.state.postMessage;\n    let hex;\n\n    // Put long posts on ipfs\n    if (post.length > 60) {\n      const { cid } = await ipfs.add(post, { pin: true });\n      hex = stringToHex(`ipfs://${cid.toString()}`);\n    } else {\n      hex = stringToHex(post);\n    }\n\n    window.ethereum\n      .request({\n        method: \"eth_sendTransaction\",\n        params: [\n          {\n            to: window.ethereum.selectedAddress,\n            from: window.ethereum.selectedAddress,\n            data: `0x${hex}`,\n          },\n        ],\n      })\n      .then((_) => {})\n      .catch((_) => {})\n      .finally((_) => this.setState({ addModalOpen: false, postMessage: \"\" }));\n  }\n\n  render() {\n    return (\n      <div className={this.state.theme}>\n        <Menu\n          fixed=\"top\"\n          compact\n          borderless\n          inverted={this.state.theme === \"dark\"}\n        >\n          <Menu.Item\n            header\n            content={\n              this.state.id\n                ? `Profile ${this.state.id.substring(\n                    0,\n                    6\n                  )}...${this.state.id.slice(-4)}`\n                : \"Profile\"\n            }\n          />\n          {this.state.id && (\n            <Menu.Item\n              icon=\"refresh\"\n              disabled={this.state.disableRefresh}\n              onClick={() => {\n                this.profile.current.loadData(this.state.id);\n                this.setState({ disableRefresh: true });\n                setTimeout(\n                  () => this.setState({ disableRefresh: false }),\n                  2000\n                );\n              }}\n            />\n          )}\n\n          <Menu.Item\n            position=\"right\"\n            icon={this.state.theme === \"dark\" ? \"moon\" : \"sun\"}\n            onClick={this.onClickToggleTheme.bind(this)}\n          />\n          <Menu.Item\n            name={\n              this.state.disableConnect\n                ? \"Install Metamask\"\n                : this.state.connect\n                ? \"Disconnect\"\n                : \"Connect\"\n            }\n            icon={this.state.disableConnect ? \"warning\" : \"power\"}\n            onClick={\n              this.state.disableConnect\n                ? () => {\n                    window.open(\"https://metamask.io\", \"_blank\");\n                  }\n                : this.onClickConnect.bind(this)\n            }\n          />\n        </Menu>\n        <Profile\n          ref={this.profile}\n          theme={this.state.theme}\n          id={this.state.id}\n        />\n        <Button\n          circular\n          icon=\"add\"\n          size=\"big\"\n          onClick={this.onClickAdd.bind(this)}\n          style={{\n            display: this.state.connect ? \"block\" : \"none\",\n            position: \"fixed\",\n            margin: \"2em\",\n            bottom: \"0px\",\n            right: \"0px\",\n            zIndex: 6,\n          }}\n        />\n        <Modal open={this.state.addModalOpen}>\n          <Modal.Header>Post a new Message</Modal.Header>\n          <Modal.Content>\n            <Modal.Description>\n              <Input\n                fluid\n                placeholder=\"Enter your messsage\"\n                onChange={(e, { value }) =>\n                  this.setState({ postMessage: value })\n                }\n              />\n              <Message warning>\n                <p>\n                  Metamask will prompt you for transaction confirmation. Verify\n                  transaction amount is 0 and to address is your own. The data\n                  input will be a hex encode of your post.\n                </p>\n                <p>\n                  After confirming in Metamask, the transaction may take some\n                  time to finalize on the blockchain based on network\n                  conditions. You can refresh from the header icon when Metamask\n                  notifies you of successful posting.\n                </p>\n              </Message>\n            </Modal.Description>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              negative\n              content=\"Cancel\"\n              onClick={() =>\n                this.setState({ addModalOpen: false, postMessage: \"\" })\n              }\n            />\n            <Button\n              content=\"Post\"\n              labelPosition=\"right\"\n              icon=\"checkmark\"\n              positive\n              disabled={this.state.postMessage ? false : true}\n              onClick={this.onClickPostToMetamask.bind(this)}\n            />\n          </Modal.Actions>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}