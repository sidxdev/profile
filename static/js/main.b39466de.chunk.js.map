{"version":3,"sources":["components/FeedItem.js","lib/HexStringUtil.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["IPFS_GATEWAY","FeedItem","props","type","lazy","content","startsWith","state","text","lazyText","iconColor","replace","HTMLReactParser","url","color","a","axios","get","response","contentType","headers","search","this","setState","data","lazyImage","json","image","loadAndSetFromURL","Card","fluid","raised","style","background","theme","Image","wrapped","src","Content","Description","formatHTMLText","extra","Label","attached","size","date","React","Component","stringToHex","string","split","map","c","charCodeAt","toString","padStart","join","Profile","feed","localStorage","getItem","JSON","parse","id","parseInt","chain","host","status","Array","isArray","result","filter","e","to","toLowerCase","input","v","i","findIndex","t","hash","hex","timeStamp","decodeURIComponent","substring","Date","reverse","setItem","stringify","Container","Divider","hidden","Header","slice","Group","item","create","require","App","disableConnect","window","ethereum","ipfsHost","ipfs","fileUploadRef","createRef","connect","addModalOpen","ipfsModalOpen","postMessage","disableRefresh","fileUploaded","profile","setTheme","isOnline","then","_","document","body","classList","remove","add","removeItem","request","method","accounts","chainId","current","loadData","catch","post","pin","imageCID","cid","File","length","params","from","finally","className","Menu","fixed","compact","borderless","inverted","Item","header","icon","disabled","onClick","setTimeout","position","onClickToggleTheme","bind","name","open","onClickConnect","ref","Button","circular","onClickAdd","display","margin","bottom","right","zIndex","Modal","Input","maxLength","placeholder","onChange","value","marginTop","labelPosition","click","accept","target","files","negative","Message","error","warning","Actions","positive","onClickPostToMetamask","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b39466de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Image, Label } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport HTMLReactParser from \"html-react-parser\";\r\n\r\nconst IPFS_GATEWAY = \"https://ipfs.io/ipfs/\";\r\n\r\nclass FeedItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let type = \"text\";\r\n    let lazy = false;\r\n\r\n    if (this.props.content.startsWith(\"https://\")) {\r\n      type = \"https\";\r\n      lazy = true;\r\n    } else if (this.props.content.startsWith(\"ipfs://\")) {\r\n      type = \"ipfs\";\r\n      lazy = true;\r\n    }\r\n\r\n    this.state = {\r\n      text: true,\r\n      lazy,\r\n      type,\r\n      lazyText: \"loading...\",\r\n      iconColor: \"grey\",\r\n    };\r\n  }\r\n\r\n  formatHTMLText(content) {\r\n    // enable links\r\n    const linksRegex = /(https?:\\/\\/[^\\s]+)/gm;\r\n    content = content.replace(\r\n      linksRegex,\r\n      `<a href=\"$1\" target=\"_blank\">$1</a>`\r\n    );\r\n\r\n    return <div>{HTMLReactParser(content)}</div>;\r\n  }\r\n\r\n  async loadAndSetFromURL(url, color) {\r\n    let response = await axios.get(url);\r\n    let contentType = response.headers[\"content-type\"];\r\n    if (contentType.search(\"text/plain\") >= 0) {\r\n      this.setState({\r\n        lazyText: response.data,\r\n        iconColor: color,\r\n      });\r\n    } else if (contentType.search(\"image\") >= 0) {\r\n      this.setState({\r\n        lazyText: \"\",\r\n        lazyImage: url,\r\n        iconColor: color,\r\n      });\r\n    } else if (contentType.search(\"application/json\") >= 0) {\r\n      let json = response.data;\r\n\r\n      this.setState({\r\n        lazyText: json.text,\r\n        lazyImage: json.image ? `${IPFS_GATEWAY}${json.image}` : null,\r\n        iconColor: color,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        lazyText: \"Content not supported.\",\r\n        iconColor: color,\r\n      });\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.state.lazy) {\r\n      switch (this.state.type) {\r\n        default:\r\n        case \"https\":\r\n          await this.loadAndSetFromURL(this.props.content, \"red\");\r\n          break;\r\n        case \"ipfs\":\r\n          let url = `${IPFS_GATEWAY}${this.props.content.replace(\r\n            \"ipfs://\",\r\n            \"\"\r\n          )}`;\r\n          await this.loadAndSetFromURL(url, \"teal\");\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        fluid\r\n        raised\r\n        style={{\r\n          background: this.props.theme === \"dark\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        {this.state.lazyImage && (\r\n          <Image fluid wrapped src={this.state.lazyImage} />\r\n        )}\r\n        <Card.Content>\r\n          <Card.Description\r\n            style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n          >\r\n            {this.formatHTMLText(\r\n              this.state.lazy ? this.state.lazyText : this.props.content\r\n            )}\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content\r\n          extra\r\n          style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n        >\r\n          {this.state.lazy && (\r\n            <Label\r\n              attached=\"bottom right\"\r\n              color={this.state.iconColor}\r\n              size=\"tiny\"\r\n            >\r\n              {this.state.type}{\" \"}\r\n            </Label>\r\n          )}\r\n          {this.props.date}\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedItem;\r\n","export function stringToHex(string) {\r\n  return string\r\n    .split(\"\")\r\n    .map((c) => c.charCodeAt(0).toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n}\r\n\r\nexport function hexToString(hex) {\r\n  return decodeURIComponent(\r\n    hex\r\n      .replace(/\\s+/g, \"\")\r\n      .replace(/[0-9a-f]{2}/g, \"%$&\")\r\n      .substring(2)\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Container, Divider, Header } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport FeedItem from \"./FeedItem\";\r\nimport { hexToString } from \"../lib/HexStringUtil\";\r\n\r\nclass Profile extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let feed = localStorage.getItem(\"feed\");\r\n    if (feed) {\r\n      feed = JSON.parse(feed);\r\n    } else {\r\n      feed = [];\r\n    }\r\n\r\n    this.state = {\r\n      feed,\r\n    };\r\n  }\r\n\r\n  async loadData(id) {\r\n    if (!id) return;\r\n\r\n    let host;\r\n\r\n    switch (parseInt(this.props.chain)) {\r\n      // Polygon Mumbai Testnet\r\n      case 80001:\r\n        host = \"https://api-testnet.polygonscan.com\";\r\n        break;\r\n\r\n      // Polygon Mainnet\r\n      case 137:\r\n        host = \"https://api.polygonscan.com\";\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\r\n    let response = await axios.get(\r\n      `${host}/api?module=account&action=txlist&address=${id}&startblock=1&endblock=99999999&sort=asc`\r\n    );\r\n\r\n    let data = response.data;\r\n\r\n    if (data.status !== \"1\" || !Array.isArray(data.result)) return;\r\n\r\n    let feed = data.result\r\n      .filter((e) => e.to.toLowerCase() === this.props.id.toLowerCase())\r\n      .filter((e) => e.input !== \"0x\")\r\n      .filter((v, i, a) => a.findIndex((t) => t.hash === v.hash) === i)\r\n      .map(({ hash, input, timeStamp }) => ({\r\n        hash,\r\n        content: hexToString(input),\r\n        date: new Date(parseInt(timeStamp) * 1000).toString().substring(0, 24),\r\n      }))\r\n      .reverse();\r\n\r\n    this.setState({ feed });\r\n    localStorage.setItem(\"feed\", JSON.stringify(feed));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Divider hidden />\r\n        <Divider hidden />\r\n        {this.props.id && (\r\n          <Header\r\n            style={{ color: this.props.theme === \"dark\" ? \"white\" : \"black\" }}\r\n            content={`Address ${this.props.id.substring(\r\n              0,\r\n              6\r\n            )}...${this.props.id.slice(-4)} Chain ${this.props.chain}`}\r\n          />\r\n        )}\r\n        <Divider hidden />\r\n        <Card.Group>\r\n          {this.props.id &&\r\n            this.state.feed.map((item) => (\r\n              <FeedItem key={item.hash} {...item} theme={this.props.theme} />\r\n            ))}\r\n        </Card.Group>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { createRef } from \"react\";\r\nimport { Button, Input, Menu, Message, Modal } from \"semantic-ui-react\";\r\nimport Profile from \"./components/Profile\";\r\nimport { stringToHex } from \"./lib/HexStringUtil\";\r\nconst { create } = require(\"ipfs-http-client\");\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    let disableConnect = typeof window.ethereum === \"undefined\";\r\n    const id = localStorage.getItem(\"id\") || \"\";\r\n    const chain = localStorage.getItem(\"chain\") || null;\r\n    const ipfsHost = localStorage.getItem(\"ipfs\") || \"http://localhost:5001\";\r\n    this.ipfs = create(ipfsHost);\r\n    this.fileUploadRef = createRef();\r\n\r\n    this.state = {\r\n      ipfsHost,\r\n      theme: localStorage.getItem(\"theme\") || \"light\",\r\n      connect: id ? true : false,\r\n      disableConnect,\r\n      id,\r\n      chain,\r\n      addModalOpen: false,\r\n      ipfsModalOpen: false,\r\n      postMessage: \"\",\r\n      disableRefresh: false,\r\n      ipfs: false,\r\n      fileUploaded: null,\r\n    };\r\n\r\n    this.profile = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setTheme(this.state.theme);\r\n\r\n    this.ipfs.isOnline().then((_) => {\r\n      this.setState({ ipfs: true });\r\n    });\r\n  }\r\n\r\n  onClickToggleTheme() {\r\n    if (this.state.theme === \"dark\") {\r\n      this.setTheme(\"light\");\r\n    } else {\r\n      this.setTheme(\"dark\");\r\n    }\r\n  }\r\n\r\n  setTheme(theme) {\r\n    this.setState({ theme });\r\n    localStorage.setItem(\"theme\", theme);\r\n    document.body.classList.remove(\"dark\");\r\n    document.body.classList.remove(\"light\");\r\n    document.body.classList.add(theme);\r\n  }\r\n\r\n  onClickConnect() {\r\n    if (this.state.connect) {\r\n      this.setState({ connect: false, id: \"\" });\r\n      localStorage.removeItem(\"feed\");\r\n      localStorage.removeItem(\"id\");\r\n    } else {\r\n      window.ethereum\r\n        .request({ method: \"eth_requestAccounts\" })\r\n        .then((accounts) => {\r\n          let chain = parseInt(window.ethereum.chainId);\r\n          let id = accounts[0];\r\n          localStorage.setItem(\"id\", id);\r\n          localStorage.setItem(\"chain\", chain);\r\n          this.setState({ connect: true, id, chain });\r\n          this.profile.current.loadData(id);\r\n        })\r\n        .catch((_) => {\r\n          this.setState({ connect: false, id: \"\" });\r\n          localStorage.removeItem(\"feed\");\r\n          localStorage.removeItem(\"id\");\r\n        });\r\n    }\r\n  }\r\n\r\n  onClickAdd() {\r\n    this.setState({ addModalOpen: true, postMessage: \"\", fileUploaded: null });\r\n  }\r\n\r\n  async onClickPostToMetamask() {\r\n    let post = this.state.postMessage;\r\n    let hex;\r\n\r\n    // Image upload\r\n    if (this.state.fileUploaded) {\r\n      const { cid: imageCID } = await this.ipfs.add(this.state.fileUploaded, {\r\n        pin: true,\r\n      });\r\n      post = JSON.stringify({\r\n        text: post,\r\n        image: imageCID.toString(),\r\n      });\r\n    }\r\n\r\n    // Put long posts on ipfs\r\n    if (\r\n      post instanceof File ||\r\n      (post.length > 60 && !post.startsWith(\"https://\"))\r\n    ) {\r\n      const { cid } = await this.ipfs.add(post, { pin: true });\r\n      hex = stringToHex(`ipfs://${cid.toString()}`);\r\n    } else {\r\n      hex = stringToHex(post);\r\n    }\r\n\r\n    window.ethereum\r\n      .request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [\r\n          {\r\n            to: this.state.id,\r\n            from: this.state.id,\r\n            data: `0x${hex}`,\r\n          },\r\n        ],\r\n      })\r\n      .then((_) => {})\r\n      .catch((_) => {})\r\n      .finally((_) =>\r\n        this.setState({\r\n          addModalOpen: false,\r\n          postMessage: \"\",\r\n          fileUploaded: null,\r\n        })\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.theme}>\r\n        <Menu\r\n          fixed=\"top\"\r\n          compact\r\n          borderless\r\n          inverted={this.state.theme === \"dark\"}\r\n        >\r\n          <Menu.Item header content=\"Profile\" />\r\n          {this.state.id && (\r\n            <Menu.Item\r\n              icon=\"refresh\"\r\n              disabled={this.state.disableRefresh}\r\n              onClick={() => {\r\n                this.profile.current.loadData(this.state.id);\r\n                this.setState({ disableRefresh: true });\r\n                setTimeout(\r\n                  () => this.setState({ disableRefresh: false }),\r\n                  2000\r\n                );\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <Menu.Item\r\n            position=\"right\"\r\n            icon=\"cubes\"\r\n            onClick={() => this.setState({ ipfsModalOpen: true })}\r\n          />\r\n          <Menu.Item\r\n            icon={this.state.theme === \"dark\" ? \"moon\" : \"sun\"}\r\n            onClick={this.onClickToggleTheme.bind(this)}\r\n          />\r\n          <Menu.Item\r\n            name={\r\n              this.state.disableConnect\r\n                ? \"Install Metamask\"\r\n                : this.state.connect\r\n                ? \"Disconnect\"\r\n                : \"Connect\"\r\n            }\r\n            icon={this.state.disableConnect ? \"warning\" : \"power\"}\r\n            onClick={\r\n              this.state.disableConnect\r\n                ? () => {\r\n                    window.open(\"https://metamask.io\", \"_blank\");\r\n                  }\r\n                : this.onClickConnect.bind(this)\r\n            }\r\n          />\r\n        </Menu>\r\n        <Profile\r\n          ref={this.profile}\r\n          theme={this.state.theme}\r\n          id={this.state.id}\r\n          chain={this.state.chain}\r\n        />\r\n        <Button\r\n          circular\r\n          icon=\"add\"\r\n          size=\"big\"\r\n          onClick={this.onClickAdd.bind(this)}\r\n          style={{\r\n            display: this.state.connect ? \"block\" : \"none\",\r\n            position: \"fixed\",\r\n            margin: \"2em\",\r\n            bottom: \"0px\",\r\n            right: \"0px\",\r\n            zIndex: 6,\r\n          }}\r\n        />\r\n        <Modal open={this.state.addModalOpen}>\r\n          <Modal.Header>Post a new Message</Modal.Header>\r\n          <Modal.Content>\r\n            <Modal.Description>\r\n              <Input\r\n                maxLength={this.state.ipfs ? 1000 : 60}\r\n                fluid\r\n                placeholder=\"Enter your messsage\"\r\n                onChange={(e, { value }) =>\r\n                  this.setState({ postMessage: value })\r\n                }\r\n              />\r\n              {this.state.ipfs ? (\r\n                <div style={{ marginTop: \"1em\" }}>\r\n                  <Button\r\n                    content=\"Upload Image\"\r\n                    labelPosition=\"left\"\r\n                    icon=\"file\"\r\n                    onClick={() => this.fileUploadRef.current.click()}\r\n                  />\r\n                  <input\r\n                    ref={this.fileUploadRef}\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    hidden\r\n                    onChange={({ target }) =>\r\n                      this.setState({ fileUploaded: target.files[0] })\r\n                    }\r\n                  />\r\n                  {this.state.fileUploaded && (\r\n                    <Button\r\n                      negative\r\n                      icon=\"remove\"\r\n                      content={this.state.fileUploaded.name}\r\n                      onClick={() => {\r\n                        this.setState({ fileUploaded: null });\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <Message\r\n                  error\r\n                  content=\"Cannot connect to IPFS Node. Posts are limited to 60 characters.\"\r\n                />\r\n              )}\r\n              <Message warning>\r\n                <p>\r\n                  Your wallet will prompt you for transaction confirmation.\r\n                  Verify transaction amount is 0 and to address is your own. The\r\n                  data input will be a hex encode of your post.\r\n                </p>\r\n                <p>\r\n                  After confirming in your wallet, the transaction may take some\r\n                  time to finalize on the blockchain based on network\r\n                  conditions. You can refresh from the header icon when your\r\n                  wallet notifies you of successful posting.\r\n                </p>\r\n              </Message>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              negative\r\n              content=\"Cancel\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  addModalOpen: false,\r\n                  postMessage: \"\",\r\n                  fileUploaded: null,\r\n                })\r\n              }\r\n            />\r\n            <Button\r\n              content=\"Post\"\r\n              labelPosition=\"right\"\r\n              icon=\"checkmark\"\r\n              positive\r\n              disabled={this.state.postMessage ? false : true}\r\n              onClick={this.onClickPostToMetamask.bind(this)}\r\n            />\r\n          </Modal.Actions>\r\n        </Modal>\r\n        <Modal open={this.state.ipfsModalOpen}>\r\n          <Modal.Header>Set IPFS Node</Modal.Header>\r\n          <Modal.Content>\r\n            <Modal.Description>\r\n              <Input\r\n                fluid\r\n                value={this.state.ipfsHost}\r\n                onChange={(e, { value }) => this.setState({ ipfsHost: value })}\r\n              />\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              negative\r\n              content=\"Cancel\"\r\n              onClick={() => this.setState({ ipfsModalOpen: false })}\r\n            />\r\n            <Button\r\n              disabled={\r\n                this.state.ipfsHost &&\r\n                (this.state.ipfsHost.startsWith(\"http://\") ||\r\n                  this.state.ipfsHost.startsWith(\"https://\"))\r\n                  ? false\r\n                  : true\r\n              }\r\n              content=\"Save\"\r\n              labelPosition=\"right\"\r\n              icon=\"checkmark\"\r\n              positive\r\n              onClick={() => {\r\n                localStorage.setItem(\"ipfs\", this.state.ipfsHost);\r\n                window.location.reload();\r\n              }}\r\n            />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}